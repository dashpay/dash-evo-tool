name: Release Dash Evo Tool

on:
  push:
    tags:
      - "v*"
      - "v*-dev.*"
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: "Version (i.e. v0.1.0)"
        required: true
      create_release:
        description: "Create GitHub Release (check to publish release)"
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  attestations: write
  contents: write

jobs:
  build-and-release:
    name: Build and Release Dash Evo Tool
    strategy:
      matrix:
        include:
          # Linux x86_64 - Modern build (Ubuntu 24.04, GLIBC 2.39)
          - name: "linux-x86_64"
            runs-on: "ubuntu-24.04"
            target: "x86_64-unknown-linux-gnu"
            platform: "x86_64-linux"
            build-type: "modern"

          # Linux x86_64 - Compatible build (Ubuntu 20.04, GLIBC 2.31)
          - name: "linux-x86_64-compat"
            runs-on: "ubuntu-20.04"
            target: "x86_64-unknown-linux-gnu"
            platform: "x86_64-linux-compat"
            build-type: "compat"

          # Linux ARM64 - Modern build
          - name: "linux-arm64"
            runs-on: "ubuntu-22.04-arm"
            target: "aarch64-unknown-linux-gnu"
            platform: "arm64-linux"
            build-type: "modern"

          # Linux ARM64 - Compatible build
          - name: "linux-arm64-compat"
            runs-on: "ubuntu-20.04-arm"
            target: "aarch64-unknown-linux-gnu"
            platform: "arm64-linux-compat"
            build-type: "compat"

          # AppImage x86_64 build
          - name: "linux-x86_64-appimage"
            runs-on: "ubuntu-24.04"
            target: "x86_64-unknown-linux-gnu"
            platform: "x86_64-linux-appimage"
            build-type: "appimage"

          # AppImage ARM64
          - name: "linux-arm64-appimage"
            runs-on: "ubuntu-24.04-arm"
            target: "aarch64-unknown-linux-gnu"
            platform: "arm64-linux-appimage"
            build-type: "appimage"

          # macOS builds
          - name: "macos-x86_64"
            runs-on: "macos-13"
            target: "x86_64-apple-darwin"
            platform: "x86_64-mac"
          - name: "macos-arm64"
            runs-on: "macos-latest"
            target: "aarch64-apple-darwin"
            platform: "arm64-mac"

          # Windows build
          - name: "Windows"
            runs-on: "ubuntu-24.04"
            target: "x86_64-pc-windows-gnu"
            platform: "windows"
            ext: ".exe"

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup prerequisites
        run: |
          mkdir -p dash-evo-tool/
          cp .env.example dash-evo-tool/.env
          cp -r dash_core_configs/ dash-evo-tool/dash_core_configs

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install essentials
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config clang cmake unzip libsqlite3-dev zip
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            sudo apt-get install -y gcc-mingw-w64 mingw-w64 mingw-w64-x86-64-dev
          fi
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ] && [ "${{ runner.arch }}" != "ARM64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
          uname -a && cargo clean

      # Install AppImage tools for AppImage builds
      - name: Install x86 AppImage tools
        if: ${{ matrix.build-type == 'appimage' && matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          sudo mv linuxdeploy-x86_64.AppImage /usr/local/bin/linuxdeploy
          # Install additional dependencies that might be needed at runtime
          sudo apt-get install -y libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-xkb-dev libxkbcommon-x11-dev

      # Install AppImage tools for AppImage builds
      - name: Install ARM AppImage tools
        if: ${{ matrix.build-type == 'appimage' && matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-aarch64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          sudo mv linuxdeploy-x86_64.AppImage /usr/local/bin/linuxdeploy
          # Install additional dependencies that might be needed at runtime
          sudo apt-get install -y libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-xkb-dev libxkbcommon-x11-dev

      - name: Install protoc (ARM)
        if: ${{ matrix.platform == 'arm64-linux' || matrix.platform == 'arm64-linux-compat' || matrix.platform == 'arm64-linux-appimage' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-aarch_64.zip && sudo unzip -o protoc-25.2-linux-aarch_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-linux-aarch_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-linux-aarch_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (AMD/AppImage)
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-x86_64.zip && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-linux-x86_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Windows)
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-x86_64.zip && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-linux-x86_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Mac x64)
        if: ${{ matrix.target == 'x86_64-apple-darwin' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-osx-x86_64.zip && sudo unzip -o protoc-25.2-osx-x86_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-osx-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-osx-x86_64.zip && uname -a
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Mac ARM)
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-osx-aarch_64.zip && sudo unzip -o protoc-25.2-osx-aarch_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-osx-aarch_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-osx-aarch_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Windows libsql
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        run: curl -OL https://www.sqlite.org/2024/sqlite-dll-win-x64-3460100.zip && sudo unzip -o sqlite-dll-win-x64-3460100.zip -d winlibs && sudo chown -R runner:docker winlibs/ && pwd && ls -lah && cd winlibs && x86_64-w64-mingw32-dlltool -d sqlite3.def -l libsqlite3.a && ls -lah && cd ..

      - name: Build project
        run: |
          cargo build --release --target ${{ matrix.target }}
          mv target/${{ matrix.target }}/release/dash-evo-tool${{ matrix.ext }} dash-evo-tool/dash-evo-tool${{ matrix.ext }}
        env:
          CC_x86_64_pc_windows_gnu: x86_64-w64-mingw32-gcc
          AR_x86_64_pc_windows_gnu: x86_64-w64-mingw32-ar
          CFLAGS_x86_64_pc_windows_gnu: "-O2"

      # Create AppImage
      - name: Create AppImage
        if: ${{ matrix.build-type == 'appimage' }}
        run: |
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          # Copy binary and resources
          cp dash-evo-tool/dash-evo-tool AppDir/usr/bin/
          cp -r dash-evo-tool/dash_core_configs AppDir/usr/bin/
          cp dash-evo-tool/.env AppDir/usr/bin/

          # Create desktop file
          cat > AppDir/usr/share/applications/dash-evo-tool.desktop << EOF
          [Desktop Entry]
          Name=Dash Evo Tool
          Exec=dash-evo-tool
          Icon=dash-evo-tool
          Type=Application
          Categories=Utility;
          X-AppImage-Version=${{ github.ref_name }}
          EOF

          # Copy the app icon
          cp mac_os/AppIcons/Assets.xcassets/AppIcon.appiconset/256.png AppDir/usr/share/icons/hicolor/256x256/apps/dash-evo-tool.png

          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          cd "${HERE}/usr/bin"
          exec "${HERE}/usr/bin/dash-evo-tool" "$@"
          EOF
          chmod +x AppDir/AppRun

          # Use linuxdeploy to create AppImage
          linuxdeploy --appdir AppDir --output appimage

          # Move the generated AppImage
          mv Dash_Evo_Tool*.AppImage dash-evo-tool.AppImage

      - name: Package release
        if: ${{ matrix.build-type != 'appimage' }}
        run: |
          zip -r dash-evo-tool-${{ matrix.platform }}.zip dash-evo-tool/

      - name: Package AppImage
        if: ${{ matrix.build-type == 'appimage' }}
        run: |
          # AppImage is already a single file, just create a zip for consistency
          zip dash-evo-tool-${{ matrix.platform }}.zip dash-evo-tool.AppImage

      - name: Attest
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "dash-evo-tool-${{ matrix.platform }}.zip"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dash-evo-tool-${{ matrix.platform }}.zip
          path: dash-evo-tool-${{ matrix.platform }}.zip

  release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    steps:
      # Download all Linux variants
      - name: Download Linux AMD64 Modern
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-x86_64-linux.zip
      - name: Download Linux AMD64 Compatible
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-x86_64-linux-compat.zip
      - name: Download Linux AMD64 AppImage
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-x86_64-linux-appimage.zip
      - name: Download Linux ARM64 Modern
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-arm64-linux.zip
      - name: Download Linux ARM64 Compatible
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-arm64-linux-compat.zip

      # Download macOS and Windows
      - name: Download MacOS AMD64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-x86_64-mac.zip
      - name: Download MacOS ARM64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-arm64-mac.zip
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-windows.zip

      - name: Publish release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: |
            ./dash-evo-tool-x86_64-linux.zip
            ./dash-evo-tool-x86_64-linux-compat.zip
            ./dash-evo-tool-x86_64-linux-appimage.zip
            ./dash-evo-tool-arm64-linux.zip
            ./dash-evo-tool-arm64-linux-compat.zip
            ./dash-evo-tool-x86_64-mac.zip
            ./dash-evo-tool-arm64-mac.zip
            ./dash-evo-tool-windows.zip
          draft: false
          prerelease: true
          body: |
            ## Linux Build Variants

            This release includes multiple Linux build variants to ensure compatibility:

            ### Standard Builds
            - **x86_64-linux**: Built on Ubuntu 24.04 (requires GLIBC 2.39+)
            - **arm64-linux**: Built on Ubuntu 22.04 ARM

            ### Compatible Builds (Recommended for older systems)
            - **x86_64-linux-compat**: Built on Ubuntu 20.04 (requires GLIBC 2.31+, compatible with most distributions from 2020+)
            - **arm64-linux-compat**: Built on Ubuntu 20.04 ARM

            ### AppImage (Most Compatible)
            - **x86_64-linux-appimage**: Self-contained AppImage with all dependencies bundled. Works on most Linux distributions.
              
            **Which version should I use?**
            - Try the **-compat** version first if you're on an older Linux distribution
            - Use the **AppImage** if you encounter any dependency issues
            - The standard builds offer the best performance on modern systems
