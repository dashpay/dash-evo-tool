name: Release Dash Evo Tool

on:
  push:
    tags:
      - 'v*'
      - 'v*-dev.*'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: "Version (i.e. v0.1.0)"
        required: true

jobs:
  build-and-release:
    name: Build and Release Dash Evo Tool
    strategy:
      matrix:
        include:
          - name: "linux-amd64"
            runs-on: ["self-hosted", "Linux", "x64"]  # Array of tags for AMD64
            target: "x86_64-unknown-linux-gnu"
            platform: "amd64"
          - name: "linux-arm64"
            runs-on: ["self-hosted", "Linux", "ARM64"]  # Array of tags for ARM64
            target: "aarch64-unknown-linux-gnu"
            platform: "arm64"
          - name: "macos-amd64"
            runs-on: "macos-13"
            target: "x86_64-apple-darwin"
            platform: "mac-x86"
          - name: "macos-arm64"
            runs-on: "macos-latest"
            target: "aarch64-apple-darwin"
            platform: "mac-arm"
          - name: "Windows"
            runs-on: "ubuntu-20.04"
            target: "x86_64-pc-windows-gnu"
            platform: "windows"

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install essentials
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config clang cmake unzip libsqlite3-dev gcc-mingw-w64 mingw-w64 libsqlite3-dev mingw-w64-x86-64-dev && uname -a && cargo clean

      - name: Install protoc (ARM)
        if: ${{ matrix.platform == 'arm64' }}
        run: curl -Lo /tmp/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-aarch_64.zip && sudo unzip -o /tmp/protoc.zip -d /usr/local && rm /tmp/protoc.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (AMD)
        if: ${{ matrix.platform == 'amd64' }}
        run: curl -Lo /tmp/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v22.2/protoc-22.2-linux-x86_64.zip && sudo unzip -f /tmp/protoc.zip -d /usr/local && rm /tmp/protoc.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Windows)
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-x86_64.zip && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-linux-x86_64.zip 
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Mac x64)
        if: ${{ matrix.target == 'x86_64-apple-darwin' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-osx-x86_64.zip && sudo unzip -o protoc-25.2-osx-x86_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-osx-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-osx-x86_64.zip && uname -a 
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Mac ARM)
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-osx-aarch_64.zip && sudo unzip -o protoc-25.2-osx-aarch_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-osx-aarch_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-osx-aarch_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Windows libsql
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        run: curl -OL https://www.sqlite.org/2024/sqlite-dll-win-x64-3460100.zip && sudo unzip -o sqlite-dll-win-x64-3460100.zip -d winlibs && sudo chown -R runner:docker winlibs/ && pwd && ls -lah && cd winlibs && x86_64-w64-mingw32-dlltool -d sqlite3.def -l libsqlite3.a && ls -lah && cd ..
  
      - name: Build project
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CC_x86_64_pc_windows_gnu: x86_64-w64-mingw32-gcc
          AR_x86_64_pc_windows_gnu: x86_64-w64-mingw32-ar
          CFLAGS_x86_64_pc_windows_gnu: "-O2"

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: dash-evo-tool-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/dash-evo-tool

    #continue-on-error: true

  release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux X64
        uses: actions/download-artifact@v3
        with:
          name: dash-evo-tool-x86_64-unknown-linux-gnu
          path: ./release/dash-evo-tool-x86_64-unknown-linux-gnu/

      - name: Download Linux ARM
        uses: actions/download-artifact@v3
        with:
          name: dash-evo-tool-aarch64-unknown-linux-gnu
          path: ./release/dash-evo-tool-aarch64-unknown-linux-gnu/

      - name: Download Mac x64
        uses: actions/download-artifact@v3
        with:
          name: dash-evo-tool-x86_64-apple-darwin
          path: ./release/dash-evo-tool-x86_64-apple-darwin/

      - name: Download Mac ARM
        uses: actions/download-artifact@v3
        with:
          name: dash-evo-tool-aarch64-apple-darwin
          path: ./release/dash-evo-tool-aarch64-apple-darwin/

      - name: Rename Linux X64 file
        run: mv ./release/dash-evo-tool-x86_64-unknown-linux-gnu/dash-evo-tool ./release/dash-evo-tool-x86_64-linux

      - name: Rename Linux ARM file
        run: mv ./release/dash-evo-tool-aarch64-unknown-linux-gnu/dash-evo-tool ./release/dash-evo-tool-aarch64-linux

      - name: Rename Mac x64 file
        run: mv ./release/dash-evo-tool-x86_64-apple-darwin/dash-evo-tool ./release/dash-evo-tool-x86_64-mac

      - name: Rename Mac ARM file
        run: mv ./release/dash-evo-tool-aarch64-apple-darwin/dash-evo-tool ./release/dash-evo-tool-aarch64-mac

      - name: Check dir
        run: ls -lah ./release/dash-evo-tool-aarch64-apple-darwin

      - name: Publish release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: |
            ./release/dash-evo-tool-x86_64-linux
            ./release/dash-evo-tool-aarch64-linux
            ./release/dash-evo-tool-x86_64-mac
            ./release/dash-evo-tool-aarch64-mac
          draft: false
          prerelease: true