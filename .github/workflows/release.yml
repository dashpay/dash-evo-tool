name: Release Dash Evo Tool

on:
  push:
    tags:
      - 'v*'
      - 'v*-dev.*'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: "Version (i.e. v0.1.0)"
        required: true

permissions:
  id-token: write
  attestations: write
  contents: write

jobs:
  build-and-release:
    name: Build and Release Dash Evo Tool
    strategy:
      matrix:
        include:
          - name: "linux-x86_64"
            runs-on: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"
            platform: "x86_64-linux"
          - name: "linux-arm64"
            runs-on: "ubuntu-22.04-arm"
            target: "aarch64-unknown-linux-gnu"
            platform: "arm64-linux"
          - name: "macos-x86_64"
            runs-on: "macos-13"
            target: "x86_64-apple-darwin"
            platform: "x86_64-mac"
          - name: "macos-arm64"
            runs-on: "macos-latest"
            target: "aarch64-apple-darwin"
            platform: "arm64-mac"
          - name: "Windows"
            runs-on: "ubuntu-22.04"
            target: "x86_64-pc-windows-gnu"
            platform: "windows"
            ext: ".exe"

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-


      - name: Setup prerequisites
        run: |
          mkdir -p dash-evo-tool/

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install essentials
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config clang cmake unzip libsqlite3-dev gcc-mingw-w64 mingw-w64 libsqlite3-dev mingw-w64-x86-64-dev gcc-aarch64-linux-gnu zip && uname -a && cargo clean

      - name: Install protoc (ARM)
        if: ${{ matrix.platform == 'arm64-linux' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-aarch_64.zip && sudo unzip -o protoc-25.2-linux-aarch_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-linux-aarch_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-linux-aarch_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (AMD)
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-x86_64.zip && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-linux-x86_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Windows)
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-x86_64.zip && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-linux-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-linux-x86_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Mac x64)
        if: ${{ matrix.target == 'x86_64-apple-darwin' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-osx-x86_64.zip && sudo unzip -o protoc-25.2-osx-x86_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-osx-x86_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-osx-x86_64.zip && uname -a
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Install protoc (Mac ARM)
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-osx-aarch_64.zip && sudo unzip -o protoc-25.2-osx-aarch_64.zip -d /usr/local bin/protoc && sudo unzip -o protoc-25.2-osx-aarch_64.zip -d /usr/local 'include/*' && rm -f protoc-25.2-osx-aarch_64.zip
        env:
          PROTOC: /usr/local/bin/protoc

      - name: Windows libsql
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        run: curl -OL https://www.sqlite.org/2024/sqlite-dll-win-x64-3460100.zip && sudo unzip -o sqlite-dll-win-x64-3460100.zip -d winlibs && sudo chown -R runner:docker winlibs/ && pwd && ls -lah && cd winlibs && x86_64-w64-mingw32-dlltool -d sqlite3.def -l libsqlite3.a && ls -lah && cd ..

      - name: Import macOS Code Signing Certificate
        if: ${{ runner.os == 'macOS' }}
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$MACOS_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MACOS_CERTIFICATE_PWD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build project
        run: |
          cargo build --release --target ${{ matrix.target }}
          mv target/${{ matrix.target }}/release/dash-evo-tool${{ matrix.ext }} dash-evo-tool/dash-evo-tool${{ matrix.ext }}
        env:
          CC_x86_64_pc_windows_gnu: x86_64-w64-mingw32-gcc
          AR_x86_64_pc_windows_gnu: x86_64-w64-mingw32-ar
          CFLAGS_x86_64_pc_windows_gnu: "-O2"

      - name: Sign macOS Binary
        if: ${{ runner.os == 'macOS' }}
        env:
          MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          # Sign the binary
          codesign --force --timestamp --options runtime --sign "$MACOS_SIGNING_IDENTITY" dash-evo-tool/dash-evo-tool
          
          # Verify the signature
          codesign --verify --verbose dash-evo-tool/dash-evo-tool

      - name: Notarize macOS Binary
        if: ${{ runner.os == 'macOS' }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create a zip file for notarization
          ditto -c -k --keepParent dash-evo-tool/dash-evo-tool dash-evo-tool-notarize.zip
          
          # Submit for notarization
          xcrun notarytool submit dash-evo-tool-notarize.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple dash-evo-tool/dash-evo-tool

      - name: Package release
        run: |
          zip -r dash-evo-tool-${{ matrix.platform }}.zip dash-evo-tool/

      - name: Attest
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'dash-evo-tool-${{ matrix.platform }}.zip'

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dash-evo-tool-${{ matrix.platform }}.zip
          path: dash-evo-tool-${{ matrix.platform }}.zip

  release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux AMD64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-x86_64-linux.zip
      - name: Download Linux Arm64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-arm64-linux.zip
      - name: Download MacOS AMD64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-x86_64-mac.zip
      - name: Download MacOS ARM64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-arm64-mac.zip
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: dash-evo-tool-windows.zip

      - name: Publish release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: |
            ./dash-evo-tool-x86_64-linux.zip
            ./dash-evo-tool-arm64-linux.zip
            ./dash-evo-tool-x86_64-mac.zip
            ./dash-evo-tool-arm64-mac.zip
            ./dash-evo-tool-windows.zip
          draft: false
          prerelease: true