pub mod file_store;
pub mod generic;
pub mod signature;

use crate::secret::Secret;
use dash_sdk::{
    dpp::{
        dashcore::bip32::DerivationPath,
        identity::{
            KeyType as IdentityKeyType,
            identity_public_key::accessors::v0::IdentityPublicKeyGettersV0, signer::Signer,
        },
        platform_value::BinaryData,
    },
    platform::IdentityPublicKey,
};
use serde::{Deserialize, Serialize};
use std::fmt::Debug;

/// Key Management Service (KMS) trait for managing cryptographic keys.

#[derive(Debug, Clone, PartialEq, Eq, thiserror::Error)]
pub enum KMSError {
    #[error("Key generation failed")]
    KeyGenerationError(String),
    #[error("Encryption error: {0}")]
    EncryptionError(String),
    #[error("Decryption error: {0}")]
    DecryptionError(String),
    #[error("Signing error: {0}")]
    SigningError(String),
    #[error("Signature verification error: {0}")]
    SignatureVerificationError(String),
}

pub type Error = Box<dyn std::error::Error + Send + Sync>;

pub type EncryptedData = Secret;
pub type PlainData = Vec<u8>;
pub type Digest<'a> = &'a [u8];

pub use signature::Signature;

/// Represents a public key in the KMS context.
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Serialize, Deserialize)]
pub struct PublicKey(pub BinaryData, pub IdentityKeyType);

impl PublicKey {
    /// Creates a new PublicKey instance.
    pub fn new<D: AsRef<[u8]>, T: Into<IdentityKeyType>>(data: D, key_type: T) -> Self {
        PublicKey(BinaryData::new(Vec::from(data.as_ref())), key_type.into())
    }

    /// Returns the public key data.
    pub fn data(&self) -> &BinaryData {
        &self.0
    }

    /// Returns the key type of the public key.
    pub fn key_type(&self) -> IdentityKeyType {
        self.1
    }
}

impl From<IdentityPublicKey> for PublicKey {
    fn from(value: IdentityPublicKey) -> Self {
        PublicKey(value.data().clone(), value.key_type())
    }
}

impl From<PublicKey> for BinaryData {
    fn from(public_key: PublicKey) -> Self {
        public_key.0
    }
}

impl From<PublicKey> for IdentityKeyType {
    fn from(public_key: PublicKey) -> Self {
        public_key.1
    }
}

/// This trait defines the necessary methods for a KMS to handle key generation,
/// encryption, decryption, and key management operations.
pub trait Kms {
    type KeyHandle: Clone + Debug;
    type Error: Debug + std::error::Error;

    // /// Encrypts data using public key associated with the provided key ID.
    // fn encrypt(&self, key: Self::KeyHandle, data: &PlainData)
    //     -> Result<EncryptedData, Self::Error>;

    // /// Verifies a signature against the provided data and key.
    // fn verify_signature(
    //     &self,
    //     key: &Self::KeyHandle,
    //     digest: &Digest,
    //     signature: &Signature,
    // ) -> Result<bool, Self::Error>;

    /// Unlocks the KMS for operations that require access to private keys.
    ///
    /// Consumes the password to ensure it is not stored in memory after unlocking.
    fn unlock(
        &self,
        user_id: &[u8],
        password: Secret,
        // ) -> Result<Box<dyn UnlockedKMS<KeyHandle = Self::KeyHandle, Error = Self::Error>>, Self::Error>;
    ) -> Result<impl UnlockedKMS<KeyHandle = Self::KeyHandle, Error = Self::Error>, Self::Error>;

    /// List keys managed by the KMS.
    ///
    /// Returns a vector of key handles representing the keys managed by the KMS.
    /// Only keys that are not internal (e.g., user password records) should be returned.
    fn keys(&self) -> Result<impl Iterator<Item = Self::KeyHandle>, Self::Error>;

    /// Retrieves a public key associated with the provided key handle.
    fn public_key(&self, key: &Self::KeyHandle) -> Result<Option<PublicKey>, Self::Error>;
}

/// Represents the type of key that can be generated or derived in the KMS.
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Serialize, Deserialize)]
pub enum KeyType {
    /// Represents raw keys generated by some algorithm.
    Raw { algorithm: IdentityKeyType },
    /// Seed used for key derivation.
    ///
    /// This is used to derive keys using a specific algorithm and network.
    DerivationSeed {
        network: dash_sdk::dpp::dashcore::Network,
    },
}

impl KeyType {
    /// Convenience method to create a raw key type for ECDSA using the secp256k1 curve.
    pub const fn ecdsa_secp256k1() -> Self {
        KeyType::Raw {
            algorithm: IdentityKeyType::ECDSA_SECP256K1,
        }
    }
}

impl From<KeyType> for IdentityKeyType {
    fn from(value: KeyType) -> Self {
        match value {
            KeyType::Raw { algorithm } => algorithm,
            KeyType::DerivationSeed { .. } => {
                // Derivation seeds do not have a direct mapping to IdentityKeyType
                // This is a placeholder, as the actual implementation may vary
                IdentityKeyType::ECDSA_SECP256K1 // Default or fallback type
            }
        }
    }
}
/// This trait extends the Kms trait for operations that require access to private keys.
/// It provides methods for generating and deriving key pairs, decrypting data,
/// and signing data. This trait is intended to be used after the KMS has been unlocked.
///
/// It is important to ensure that dropping an instance of `UnlockedKMS` causes the KMS to be locked again,
/// and all sensitive data is cleared from memory to prevent unauthorized access.
pub trait UnlockedKMS: Kms + Signer {
    /// Generates a new key pair, using provided seed as a source of randomness.
    ///
    /// For the same seed and key type, the same key pair should be generated.
    fn generate_key_pair(
        &mut self,
        key_type: KeyType,
        seed: Secret,
    ) -> Result<Self::KeyHandle, Self::Error>;

    /// Derives a key pair for a given derivation path from a derivation seed.
    fn derive_key_pair(
        &mut self,
        derivation_seed: &Self::KeyHandle,
        key_type: KeyType,
        path: &DerivationPath,
    ) -> Result<Self::KeyHandle, Self::Error>;

    /// Decrypts data using private key associated with the provided key ID.
    fn decrypt(
        &self,
        key: &Self::KeyHandle,
        encrypted_data: &EncryptedData,
    ) -> Result<PlainData, Self::Error>;

    fn sign_digest(&self, key: &Self::KeyHandle, digest: &Digest)
    -> Result<Signature, Self::Error>;

    /// Exports a backup of the KMS.
    ///
    /// Backup should be encrypted and should not contain any sensitive data in plaintext.
    fn export(&self, encryption_key: Secret) -> Result<Vec<u8>, Self::Error>;
}

/// Generic Key-Value Store trait for backing storage of keys and their associated data.
pub trait KVStore<K: Clone + std::fmt::Debug, V: Clone> {
    type Error: std::error::Error + Send + Sync;

    /// Retrieves a value associated with the given key.
    fn get(&self, key: &K) -> Result<Option<V>, Self::Error>;

    /// Stores a key-value pair.
    fn set(&mut self, key: K, value: V) -> Result<(), Self::Error>;

    /// Removes a key-value pair.
    ///
    /// Returns `true` if the key was found and removed, or `false` if the key was not found.
    fn delete(&mut self, key: &K) -> Result<bool, Self::Error>;

    /// Lists all keys in the store.
    fn keys(&self) -> Result<Vec<K>, Self::Error>;

    /// Checks if a key exists in the store.
    fn contains_key(&self, key: &K) -> Result<bool, Self::Error>;

    /// Clears all key-value pairs from the store.
    fn clear(&mut self) -> Result<(), Self::Error>;
}
